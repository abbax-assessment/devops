name: deploy:task-runner

on:
  workflow_dispatch:
    inputs:
      workflow-run-id:
        description: 'The upstream workflow run id'
        required: true
      artifact-id:
        description: 'The artifact id to deploy'
        required: true
      tag:
        description: 'The tag of the artifact to deploy'
        required: true
        
jobs:     
  build-scan-push:
    runs-on: ubuntu-latest  
    environment: ${{ github.ref_name }} # TODO
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployments/task-runner

      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   id: download-artifact
      #   with:
      #     github-token: ${{ secrets.ORG_TOKEN }}
      #     repository: ${{ vars.DEPLOYMENT_API_REPO }}
      #     name: ${{ github.event.inputs.artifact-id }}
      #     run-id: ${{ github.event.inputs.workflow-run-id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      # - name: Login to ECR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.IMAGE_REGISTRY_URL_TASK_RUNNER }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Docker meta
      #   uses: docker/metadata-action@v4
      #   id: docker-metadata
      #   with:
      #     images: |
      #       ${{ vars.IMAGE_REGISTRY_URL_TASK_RUNNER }}
      #     tags: |
      #       type=raw,value={{sha}}-{{date 'X'}}

      # - name: Build Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     tags: ${{ steps.docker-metadata.outputs.tags }}
      #     labels: ${{ steps.docker-metadata.outputs.labels }}
      #     push: true     
      #     file: deployments/api/Dockerfile 

      # - name: Run trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   env:
      #     TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"        
      #   with:
      #     image-ref: ${{ steps.docker-metadata.outputs.tags }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: false
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      #     output: 'trivy-results.sarif'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      # - name: "Push to ECR"
      #   run: |
      #     docker push ${{ steps.docker-metadata.outputs.tags }}
      - name: Update the task-definition"
        run: |
          NEW_IMAGE="569985934894.dkr.ecr.eu-west-1.amazonaws.com/tsk-dev-task-runner-ecr:f8b1885-1732252760"
          TASK_FAMILY=${{ vars.TASK_DEF_FAMILY_TASK_RUNNER }}
          CONTAINER_NAME_TASK_RUNNER=${{ vars.CONTAINER_NAME_TASK_RUNNER }}

          # Fetch the latest task definition
          LATEST_TASK_DEF=$(aws ecs describe-task-definition --task-definition "$TASK_FAMILY")

          # Extract necessary fields
          CONTAINER_DEFINITIONS=$(echo "$LATEST_TASK_DEF" | jq ".taskDefinition.containerDefinitions")
          TASK_ROLE_ARN=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.taskRoleArn")
          EXECUTION_ROLE_ARN=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.executionRoleArn")
          NETWORK_MODE=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.networkMode")
          COMPATIBILITIES=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.compatibilities")
          CPU=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.cpu")
          MEMORY=$(echo "$LATEST_TASK_DEF" | jq -r ".taskDefinition.memory")

          # Update the container image
          UPDATED_CONTAINER_DEFINITIONS=$(echo "$CONTAINER_DEFINITIONS" | jq -c --arg cn "$CONTAINER_NAME_TASK_RUNNER" --arg ni "$NEW_IMAGE" 'map(if .name == $cn then .image = $ni else . end)')

          # Save updated container definitions to a file
          CONTAINER_DEFINITIONS_FILE="container-definitions.json"
          echo "$UPDATED_CONTAINER_DEFINITIONS" > "$CONTAINER_DEFINITIONS_FILE"

          # Register the new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family "$TASK_FAMILY" \
            --task-role-arn "$TASK_ROLE_ARN" \
            --execution-role-arn "$EXECUTION_ROLE_ARN" \
            --network-mode "$NETWORK_MODE" \
            --requires-compatibilities "$COMPATIBILITIES" \
            --cpu "$CPU" \
            --memory "$MEMORY" \
            --container-definitions file://"$CONTAINER_DEFINITIONS_FILE" \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          # TODO add tags


          
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          APPSPEC_FILE="appspec.yaml"
          cat > "$APPSPEC_FILE" <<EOL
          applicationName: ${{ vars.CODEDEPLOY_APP_NAME_TASK_RUNNER }}
          deploymentGroupName: ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP_TASK_RUNNER }}
          revision:
            revisionType: AppSpecContent
            appSpecContent:
              content: |
                version: 0.0
                Resources:
                  - TargetService:
                      Type: AWS::ECS::Service
                      Properties:
                        TaskDefinition: $NEW_TASK_DEF_ARN
                        LoadBalancerInfo:
                          ContainerName: $CONTAINER_NAME_TASK_RUNNER
                          ContainerPort: 3000
          EOL

          # Create a new deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --cli-input-yaml file://"$APPSPEC_FILE" \
            --query "deploymentId" \
            --output text)

          echo "Deployment initiated with ID: $DEPLOYMENT_ID"
# steps.docker-metadata.outputs.tags

