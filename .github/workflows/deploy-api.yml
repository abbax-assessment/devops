name: deploy:api

on:
  workflow_dispatch:
    inputs:
      workflow-run-id:
        description: 'The upstream workflow run id'
        required: true
      tag:
        description: 'The upstream workflow short-sha'
        required: true
      artifact-name:
        description: 'The artifact name to deploy'
        required: true
      environment:
        description: 'The environment to deploy'
        required: true
        
jobs:     
  build:
    runs-on: ubuntu-latest  
    environment: 'api-${{ github.event.inputs.environment }}'
    outputs:
      image_version: ${{ fromJson(steps.docker-metadata.outputs.json).labels['org.opencontainers.image.version'] }}
      image_ref: ${{ fromJson(steps.docker-metadata.outputs.json).tags[0] }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployments/api

      - name: Download artifact
        uses: actions/download-artifact@v4
        id: download-artifact
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          repository: ${{ vars.API_REPO }}
          name: ${{ github.event.inputs.artifact-name }}
          run-id: ${{ github.event.inputs.workflow-run-id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        uses: docker/metadata-action@v5
        id: docker-metadata
        with:
          images: |
            "${{ vars.IMAGE_REGISTRY_URL }}/${{ vars.API_ECR_NAME }}"
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}-{{date 'X'}}

      - name: Build Docker image and export
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          push: false     
          file: deployments/api/Dockerfile 
          outputs: type=docker,dest=/tmp/${{ fromJson(steps.docker-metadata.outputs.json).labels['org.opencontainers.image.version'] }}.tar
          cache-from: type=registry,ref=user/app:latest
          cache-to: type=inline

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ fromJson(steps.docker-metadata.outputs.json).labels['org.opencontainers.image.version'] }}
          path: /tmp/${{ fromJson(steps.docker-metadata.outputs.json).labels['org.opencontainers.image.version'] }}.tar

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.image_version }}
        path: /tmp

    - name: Load image
      run: |
        docker load --input /tmp/${{ needs.build.outputs.image_version }}.tar
        docker image ls -a  

    # - name: Run trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@0.28.0
    #   continue-on-error: true
    #   env:
    #     TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"        
    #   with:
    #     image-ref: ${{ needs.build.outputs.image_ref }}
    #     format: 'sarif'
    #     exit-code: '1'
    #     ignore-unfixed: false
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'
    #     output: 'trivy-results.sarif'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: failure()
    #   with:
    #     sarif_file: 'trivy-results.sarif'

  deploy-revision:  
    runs-on: ubuntu-latest
    environment: 'api-${{ github.event.inputs.environment }}' # TODO
    needs: [build, trivy-scan] # trivy-scan]
    outputs:
      task_def_arn: ${{ steps.create-task-def.outputs.task_def_arn}}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.image_version }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ needs.build.outputs.image_version }}.tar
          docker image ls -a  

      - name: "Push to ECR"
        run: |
          docker push ${{ needs.build.outputs.image_ref }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.TASK_DEF_FAMILY_API }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME_API }}
          image: ${{ needs.build.outputs.image_ref }}
      
      - name: Write AppSpec.json # TODO
        run: | 
          APPSPEC_FILE="appspec.yaml"
          cat > "$APPSPEC_FILE" <<EOL
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $
                  LoadBalancerInfo:
                    ContainerName: ${{ vars.CONTAINER_NAME_API }}
                    ContainerPort: ${{ vars.API_APP_PORT }}
          EOL

      - name: Update ECS Service Revision
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          service: ${{ vars.ECS_SERVICE_API_NAME }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.yaml
          codedeploy-deployment-group: ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP_API }}
          codedeploy-application: ${{ vars.CODEDEPLOY_APP_NAME_API }}